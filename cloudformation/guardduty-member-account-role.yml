AWSTemplateFormatVersion: 2010-09-09
Description: Mozilla Multi Account Manager member account roles to allow guardDuty master to accept invitations.
Metadata:
  Source: https://github.com/mozilla/guardduty-multi-account-manager/tree/master/cloudformation
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: "Configuration"
      Parameters:
      - MasterAccountPrincipal
      - SNSArnForPublishingIAMRoleArn
    ParameterLabels:
      MasterAccountPrincipal:
        default: Master Account IAM Principal
      SNSArnForPublishingIAMRoleArn:
        default: SNS Topic ARN to publish outputs to
Parameters:
  MasterAccountPrincipal:
    Type: String
    # Default: arn:aws:iam::123456789012:root
    AllowedPattern: '^arn:aws:iam::(?!123456789012)[0-9]*:root$'
    ConstraintDescription: A root AWS account principal (other than arn:aws:iam::123456789012:root)
    Description: 'The ARN of the AWS account of the GuardDuty master (Example : arn:aws:iam::123456789012:root)'
  SNSArnForPublishingIAMRoleArn:
    Type: String
    # Default: arn:aws:sns:us-west-2:123456789012:cloudformation-stack-emissions
    AllowedPattern: '^arn:aws:sns:[^:]*:(?!123456789012)[0-9]*:.*$'
    ConstraintDescription: An SNS Topic ARN (other than arn:aws:sns:us-west-2:123456789012:cloudformation-stack-emissions)
    Description: 'The ARN of the SNS Topic to publish an event to with the new IAM Role ARN of the GuardDuty Invitation Acceptor (Example: arn:aws:sns:us-west-2:123456789012:cloudformation-stack-emissions)'
Resources:
  GuardDutyInvitationAcceptorIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref MasterAccountPrincipal
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAcceptingGuardDutyInvitation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - guardduty:ListDetectors
                  - guardduty:CreateDetector
                  - guardduty:DeleteDetector
                  - guardduty:AcceptInvitation
                  - guardduty:DeleteInvitations
                  - guardduty:GetDetector
                  - guardduty:GetInvitationsCount
                  - guardduty:GetMasterAccount
                  - guardduty:UpdateDetector
                  - guardduty:ListInvitations
                  - guardduty:DisassociateFromMasterAccount
                Resource: '*'
      Path: '/mutli-account-guard-duty/'
  PublishIAMRoleArnsToSNS:
    Type: Custom::PublishIAMRoleArnsToSNS
    Version: '1.0'
    Properties:
      ServiceToken: !Ref SNSArnForPublishingIAMRoleArn
      category: GuardDuty Multi Account Member Role
      GuardDutyMemberAccountId: !Ref AWS::AccountId
      GuardDutyMemberAccountIAMRoleArn: !GetAtt GuardDutyInvitationAcceptorIAMRole.Arn
      GuardDutyMemberAccountIAMRoleName: !Ref GuardDutyInvitationAcceptorIAMRole
  CloudFormationLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaLoggingAndCreateServiceLinkedRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:*
                  - iam:CreateServiceLinkedRole
                Resource: '*'
  CreateGuardDutyServiceLinkedRoleFunction:
    Type: AWS::Lambda::Function
    DependsOn: CloudFormationLambdaIAMRole
    Properties:
      Code:
        ZipFile: |
            import cfnresponse
            import boto3, secrets, string


            def handler(event, context):
                client = boto3.client('iam')
                created = False
                try:
                    if event['RequestType'] in ['Create', 'Update']:
                        client.create_service_linked_role(
                            AWSServiceName='guardduty.amazonaws.com',
                            Description='A service-linked role required for Amazon '
                                        'GuardDuty to access your resources.'
                        )
                        created = True
                    elif event['RequestType'] == 'Delete':
                        pass  # Leave the role in place when stack is deleted
                except client.exceptions.InvalidInputException:
                    pass  # Role already exists
                physical_id = ''.join(
                    secrets.choice(string.ascii_uppercase + string.digits) for _ in
                    range(13))
                cfnresponse.send(
                    event, context, cfnresponse.SUCCESS, {'RoleCreated': created},
                    "CreateGuardDutyServiceLinkedRole-%s" % physical_id)
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt CloudFormationLambdaIAMRole.Arn
      Timeout: 20
  CreateGuardDutyServiceLinkedRole:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateGuardDutyServiceLinkedRoleFunction.Arn
Outputs:
  GuardDutyInvitationAcceptorRoleName:
    Description: IAM Role name of the Guard Duty Invitation Acceptor
    Value: !Ref GuardDutyInvitationAcceptorIAMRole
  GuardDutyInvitationAcceptorRoleArn:
    Description: ARN of the Guard Duty Invitation Acceptor IAM Role
    Value: !GetAtt GuardDutyInvitationAcceptorIAMRole.Arn
